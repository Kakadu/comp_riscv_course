@article{Orgass1969ABF,
  title   = {A base for a mobile programming system},
  author  = {Richard J. Orgass and William M. Waite},
  journal = {Commun. ACM},
  year    = {1969},
  volume  = {12},
  pages   = {507-510},
  url     = {https://api.semanticscholar.org/CorpusID:8164996}
}

@article{Elson1970,
  author   = {Elson, M. and Rake, S. T.},
  journal  = {IBM Systems Journal},
  title    = {Code-generation technique for large-language compilers},
  year     = {1970},
  volume   = {9},
  number   = {3},
  pages    = {166-188},
  keywords = {},
  doi      = {10.1147/sj.93.0166}
}

@techreport{Miller1971,
  author      = {Miller, P. L.},
  title       = {AUTOMATIC CREATION OF A CODE GENERATOR FROM A MACHINE DESCRIPTION},
  year        = {1971},
  publisher   = {Massachusetts Institute of Technology},
  address     = {USA},
  institution = {},
  abstract    = {This paper studies some of the problems involved in attaining machine independence for a code generator, similar to the language independence and the token independence attained by automatic parsing and automatic lexical systems. In particular, the paper examines the logic involved in two areas of code generation: computation and data reference. It presents models embodying the logic of each area and demonstrates how the models can be filled out by descriptive information about a particular machine. The paper also describes how the models can be incorporated into a descriptive macro code generating system (DMACS) to be used as a tool by a language implementor in creating a machine independent code generator, which can be made machine-directed by a suitable description of a particular machine.}
}

@article{Aho1989,
  author     = {Aho, Alfred V. and Ganapathi, Mahadevan and Tjiang, Steven W. K.},
  title      = {Code generation using tree matching and dynamic programming},
  year       = {1989},
  issue_date = {Oct. 1989},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {11},
  number     = {4},
  issn       = {0164-0925},
  url        = {https://doi.org/10.1145/69558.75700},
  doi        = {10.1145/69558.75700},
  abstract   = {Compiler-component generators, such as lexical analyzer generators and parser generators, have long been used to facilitate the construction of compilers. A tree-manipulation language called twig has been developed to help construct efficient code generators. Twig transforms a tree-translation scheme into a code generator that combines a fast top-down tree-pattern matching algorithm with dynamic programming. Twig has been used to specify and construct code generators for several experimental compilers targeted for different machines.},
  journal    = {ACM Trans. Program. Lang. Syst.},
  month      = {oct},
  pages      = {491â€“516},
  numpages   = {26}
}